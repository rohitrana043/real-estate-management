# docker-compose.yml
services:
  # Infrastructure services
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - '5431:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=real_estate_user,real_estate_property,real_estate_contact,real_estate_analytics
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/docker/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # redis:
  #   image: redis:7-alpine
  #   container_name: redis
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
  #   ports:
  #     - '6379:6379'
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - backend-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.5'
  #         memory: 512M

  # Application services
  service-registry:
    build:
      context: ./backend
      dockerfile: service-registry/Dockerfile
    image: rohitrana043/real-estate-service-registry
    container_name: service-registry
    ports:
      - '8761:8761'
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
      - EUREKA_INSTANCE_HOSTNAME=service-registry
      - JAVA_OPTS=-Xms256m -Xmx512m -XX:+ExitOnOutOfMemoryError
      - EUREKA_PROTOCOL=http
      - LOG_PATH=/app/logs
    volumes:
      - service-registry-logs:/app/logs
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:8761/actuator/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  api-gateway:
    build:
      context: ./backend
      dockerfile: api-gateway/Dockerfile
    image: rohitrana043/real-estate-api-gateway
    container_name: api-gateway
    ports:
      - '8080:8080'
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
      - EUREKA_HOST=service-registry
      # - REDIS_HOST=redis
      # - REDIS_PASSWORD=${REDIS_PASSWORD}
      - EUREKA_PROTOCOL=http
      - JWT_SECRET=${JWT_SECRET}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+ExitOnOutOfMemoryError
      - LOG_PATH=/app/logs
    volumes:
      - api-gateway-logs:/app/logs
    depends_on:
      service-registry:
        condition: service_healthy
      # redis:
      #   condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:8080/actuator/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  user-service:
    build:
      context: ./backend
      dockerfile: user-service/Dockerfile
    image: rohitrana043/real-estate-user-service
    container_name: user-service
    ports:
      - '8082:8082'
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=real_estate_user
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
      - EUREKA_PROTOCOL=http
      - EUREKA_HOST=service-registry
      - ADMIN_PASSWORD=${POSTGRES_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - CREATE_ADMIN=${CREATE_ADMIN}
      - APP_URL=http://localhost:8082
      - FRONTEND_URL=${FRONTEND_URL}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+ExitOnOutOfMemoryError
      - LOG_PATH=/app/logs
    volumes:
      - user-logs:/app/logs
    depends_on:
      service-registry:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:8082/actuator/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  property-service:
    build:
      context: ./backend
      dockerfile: property-service/Dockerfile
    image: rohitrana043/real-estate-property-service
    container_name: property-service
    ports:
      - '8081:8081'
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=real_estate_property
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
      - EUREKA_HOST=service-registry
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - EUREKA_PROTOCOL=http
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+ExitOnOutOfMemoryError
      - LOG_PATH=/app/logs
    volumes:
      - property-logs:/app/logs
    depends_on:
      service-registry:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:8081/actuator/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  analytics-service:
    build:
      context: ./backend
      dockerfile: analytics-service/Dockerfile
    image: rohitrana043/real-estate-analytics-service
    container_name: analytics-service
    ports:
      - '8084:8084'
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=real_estate_analytics
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - EUREKA_PROTOCOL=http
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
      - EUREKA_HOST=service-registry
      - PROPERTY_SERVICE_URL=http://property-service:8081
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+ExitOnOutOfMemoryError
      - LOG_PATH=/app/logs
    volumes:
      - analytics-logs:/app/logs
    depends_on:
      service-registry:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      postgres:
        condition: service_healthy
      property-service:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:8084/actuator/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  contact-service:
    build:
      context: ./backend
      dockerfile: contact-service/Dockerfile
    image: rohitrana043/real-estate-contact-service
    container_name: contact-service
    ports:
      - '8086:8086'
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=real_estate_contact
      - POSTGRES_USER=${POSTGRES_USER}
      - EUREKA_PROTOCOL=http
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - EUREKA_USERNAME=${EUREKA_USERNAME}
      - EUREKA_PASSWORD=${EUREKA_PASSWORD}
      - EUREKA_HOST=service-registry
      - FRONTEND_URL=${FRONTEND_URL}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - JAVA_OPTS=-Xms512m -Xmx1024m -XX:+ExitOnOutOfMemoryError
      - LOG_PATH=/app/logs
    volumes:
      - contact-logs:/app/logs
    depends_on:
      service-registry:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:8086/actuator/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
        - NEXT_PUBLIC_GOOGLE_MAPS_ADDRESS=${NEXT_PUBLIC_GOOGLE_MAPS_ADDRESS}
        - NEXT_NODE_ENV=${NEXT_NODE_ENV}
    image: rohitrana043/real-estate-frontend
    container_name: frontend
    ports:
      - '3000:3000'
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
      - NEXT_PUBLIC_GOOGLE_MAPS_ADDRESS=${NEXT_PUBLIC_GOOGLE_MAPS_ADDRESS}
      - NEXT_NODE_ENV=${NEXT_NODE_ENV}
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000/',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  backend-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  property-logs:
  user-logs:
  contact-logs:
  analytics-logs:
  api-gateway-logs:
  service-registry-logs:
